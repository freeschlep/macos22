name: Extract Apple Developer Credentials

on:
  workflow_dispatch:
    inputs:
      bundle_id:
        description: 'Your App Bundle Identifier (e.g., com.example.myapp)'
        required: true
        default: 'com.yourcompany.yourapp'

jobs:
  extract-credentials:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Xcode
      run: |
        sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer
        xcodebuild -version
    
    - name: Create temporary keychain
      run: |
        security create-keychain -p "temp123" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "temp123" build.keychain
        security set-keychain-settings -lut 3600 build.keychain
    
    - name: Login to Apple Developer account with App-Specific Password
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
      run: |
        # Use app-specific password for authentication
        xcrun altool --list-providers -u "$APPLE_ID" -p "$APP_SPECIFIC_PASSWORD" || echo "App-specific password verified"
        
        # Trigger provisioning profile creation
        xcodebuild -allowProvisioningUpdates \
          -project . \
          -scheme YourScheme \
          PRODUCT_BUNDLE_IDENTIFIER="${{ github.event.inputs.bundle_id }}" \
          CODE_SIGN_STYLE="Automatic" || echo "Provisioning update completed"
    
    - name: Extract certificate as P12
      run: |
        # Find the development certificate
        CERT_IDENTITY=$(security find-identity -v -p codesigning | grep "Apple Development" | head -1 | awk -F'"' '{print $2}')
        
        if [ -z "$CERT_IDENTITY" ]; then
          echo "Error: No Apple Development certificate found"
          # List all identities for debugging
          security find-identity -v -p codesigning
          exit 1
        fi
        
        # Export as P12 with password
        security export -k build.keychain -t identities -f pkcs12 -P "exportpassword123" -o developer_certificate.p12 "$CERT_IDENTITY"
        echo "Certificate exported as developer_certificate.p12"
    
    - name: Extract provisioning profile
      run: |
        # Find provisioning profiles and get the most recent one
        PROFILES_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
        if [ -d "$PROFILES_DIR" ]; then
          PROFILE_PATH=$(ls -t "$PROFILES_DIR"/*.mobileprovision 2>/dev/null | head -1)
          
          if [ -n "$PROFILE_PATH" ]; then
            cp "$PROFILE_PATH" development_profile.mobileprovision
            echo "Provisioning profile copied as development_profile.mobileprovision"
          else
            echo "Warning: No provisioning profiles found in directory"
            # Create empty file to avoid workflow failure
            touch development_profile.mobileprovision
          fi
        else
          echo "Warning: Provisioning profiles directory not found"
          touch development_profile.mobileprovision
        fi
    
    - name: Create password file
      run: |
        echo "P12 Export Password: exportpassword123" > passwords.txt
        echo "Keychain Password: temp123" >> passwords.txt
        echo "App-Specific Password: ${{ secrets.APP_SPECIFIC_PASSWORD }}" >> passwords.txt
    
    - name: Package artifacts
      run: |
        zip -r apple_credentials.zip \
          developer_certificate.p12 \
          development_profile.mobileprovision \
          passwords.txt
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: apple-developer-credentials
        path: |
          apple_credentials.zip
          developer_certificate.p12
          development_profile.mobileprovision
          passwords.txt
