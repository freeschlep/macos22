name: Sign IPA with Free Apple ID

on:
  workflow_dispatch:
    inputs:
      ipa_path:
        description: 'Path to your IPA file in the repo'
        required: true
        default: 'app.ipa'
      bundle_id:
        description: 'Your app bundle identifier'
        required: true
        default: 'com.yourcompany.yourapp'

jobs:
  sign-ipa:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Xcode
      run: |
        sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer

    - name: Authenticate with Apple
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
      run: |
        echo "🔐 Authenticating with Apple..."
        xcrun altool --list-providers -u "$APPLE_ID" -p "$APP_SPECIFIC_PASSWORD"

    - name: Prepare for signing
      run: |
        # Create a simple project to generate certificates
        mkdir -p temp_signing_project
        cd temp_signing_project
        
        cat > Package.swift << 'EOF'
        // swift-tools-version:5.5
        import PackageDescription
        let package = Package(name: "TempSigning", products: [], targets: [])
        EOF
        
        # Trigger certificate generation
        xcodebuild -allowProvisioningUpdates -scheme TempSigning -quiet 2>/dev/null || echo "Certificates ready"

    - name: Extract and prepare IPA for signing
      run: |
        echo "📦 Preparing IPA for signing..."
        
        # Extract IPA
        unzip -q "${{ github.event.inputs.ipa_path }}" -d extracted_app/
        
        # Find the .app bundle
        APP_BUNDLE=$(find extracted_app -name "*.app" -type d | head -1)
        echo "Found app bundle: $APP_BUNDLE"
        
        # Remove existing code signature
        rm -rf "$APP_BUNDLE/_CodeSignature"
        rm -f "$APP_BUNDLE/embedded.mobileprovision"

    - name: Resign the app
      env:
        BUNDLE_ID: ${{ github.event.inputs.bundle_id }}
      run: |
        APP_BUNDLE=$(find extracted_app -name "*.app" -type d | head -1)
        
        echo "🔏 Signing app bundle: $APP_BUNDLE"
        
        # Get the development identity
        IDENTITY=$(security find-identity -v -p codesigning | grep "Apple Development" | head -1 | awk -F'"' '{print $2}')
        
        if [ -z "$IDENTITY" ]; then
          echo "❌ No signing identity found"
          security find-identity -v -p codesigning
          exit 1
        fi
        
        echo "Using identity: $IDENTITY"
        
        # Sign the app bundle
        codesign --force --deep --sign "$IDENTITY" --timestamp --options runtime "$APP_BUNDLE"
        
        echo "✅ App signed successfully!"

    - name: Create new IPA with signed app
      run: |
        echo "📦 Creating new signed IPA..."
        
        # Create new IPA
        cd extracted_app
        zip -qr ../signed_app.ipa ./*
        cd ..
        
        echo "✅ Signed IPA created: signed_app.ipa"

    - name: Upload signed IPA
      uses: actions/upload-artifact@v4
      with:
        name: signed-ipa
        path: signed_app.ipa

    - name: Create installation instructions
      run: |
        cat > INSTALL.md << 'EOF'
        # How to Install Your Signed IPA
        
        ## Method 1: AltServer (Recommended)
        1. Download the signed IPA from artifacts
        2. Use AltServer to install to your device
        3. Your device must be registered with your Apple ID
        
        ## Method 2: Xcode
        1. Download the signed IPA  
        2. Open Xcode → Window → Devices and Simulators
        3. Drag IPA to your device
        
        ## Method 3: Sideloadly
        1. Use Sideloadly with your Apple ID
        2. Drag the signed IPA into Sideloadly
        3. Install to your device
        
        ## Important Notes:
        - This uses a free Apple Developer account
        - App expires in 7 days
        - You can only have 3 active apps
        - Your device UDID must be registered
        EOF

    - name: Upload instructions
      uses: actions/upload-artifact@v4
      with:
        name: installation-instructions
        path: INSTALL.md
