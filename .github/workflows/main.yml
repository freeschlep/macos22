name: Extract Apple Developer Credentials

on:
  workflow_dispatch:
    inputs:
      bundle_id:
        description: 'Your App Bundle Identifier (e.g., com.example.myapp)'
        required: true
        default: 'com.yourcompany.yourapp'

jobs:
  extract-credentials:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Xcode
      run: |
        sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer
        xcodebuild -version
    
    - name: Login to Apple Developer account with App-Specific Password
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
      run: |
        # Create a simple project to trigger certificate creation
        mkdir -p temp_project
        cd temp_project
        
        cat > Project.swift << 'EOF'
        import PackageDescription
        let package = Package(
            name: "TempProject",
            products: [],
            targets: []
        )
        EOF
        
        # This will trigger Xcode to create certificates in the login keychain
        xcodebuild -allowProvisioningUpdates \
          -project . \
          -scheme TempProject \
          PRODUCT_BUNDLE_IDENTIFIER="${{ github.event.inputs.bundle_id }}" \
          CODE_SIGN_STYLE="Automatic" \
          -destination 'generic/platform=iOS' \
          -quiet || echo "Certificate creation triggered"
    
    - name: Extract certificate as P12 from login keychain
      run: |
        # Look for certificates in the login keychain (where Xcode stores them)
        echo "Searching for certificates in login keychain..."
        security find-identity -v -p codesigning ~/Library/Keychains/login.keychain-db
        
        # Find the development certificate in login keychain
        CERT_IDENTITY=$(security find-identity -v -p codesigning ~/Library/Keychains/login.keychain-db | grep "Apple Development" | head -1 | awk -F'"' '{print $2}')
        
        if [ -z "$CERT_IDENTITY" ]; then
          echo "Trying alternative keychain path..."
          # Try the older keychain path
          security find-identity -v -p codesigning ~/Library/Keychains/login.keychain
          CERT_IDENTITY=$(security find-identity -v -p codesigning ~/Library/Keychains/login.keychain | grep "Apple Development" | head -1 | awk -F'"' '{print $2}')
        fi
        
        if [ -z "$CERT_IDENTITY" ]; then
          echo "Error: No Apple Development certificate found in login keychain"
          echo "Available identities in all keychains:"
          security find-identity -v -p codesigning
          exit 1
        fi
        
        echo "Found certificate: $CERT_IDENTITY"
        
        # Export as P12 with password from login keychain
        security export -k ~/Library/Keychains/login.keychain-db -t identities -f pkcs12 -P "exportpassword123" -o developer_certificate.p12 "$CERT_IDENTITY" || 
        security export -k ~/Library/Keychains/login.keychain -t identities -f pkcs12 -P "exportpassword123" -o developer_certificate.p12 "$CERT_IDENTITY"
        
        echo "Certificate exported as developer_certificate.p12"
    
    - name: Extract provisioning profile
      run: |
        # Find provisioning profiles and get the most recent one
        PROFILES_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
        if [ -d "$PROFILES_DIR" ]; then
          echo "Available provisioning profiles:"
          ls -la "$PROFILES_DIR"/*.mobileprovision 2>/dev/null | head -10
          
          PROFILE_PATH=$(ls -t "$PROFILES_DIR"/*.mobileprovision 2>/dev/null | head -1)
          
          if [ -n "$PROFILE_PATH" ]; then
            cp "$PROFILE_PATH" development_profile.mobileprovision
            echo "Provisioning profile copied as development_profile.mobileprovision"
          else
            echo "Warning: No provisioning profiles found in directory"
            # Create empty file to avoid workflow failure
            touch development_profile.mobileprovision
          fi
        else
          echo "Warning: Provisioning profiles directory not found"
          touch development_profile.mobileprovision
        fi
    
    - name: Create password file
      run: |
        echo "P12 Export Password: exportpassword123" > passwords.txt
        echo "App-Specific Password: ${{ secrets.APP_SPECIFIC_PASSWORD }}" >> passwords.txt
    
    - name: Package artifacts
      run: |
        zip -r apple_credentials.zip \
          developer_certificate.p12 \
          development_profile.mobileprovision \
          passwords.txt
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: apple-developer-credentials
        path: |
          apple_credentials.zip
          developer_certificate.p12
          development_profile.mobileprovision
          passwords.txt
